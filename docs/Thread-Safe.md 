<!DOCTYPE html>
<html>
<head>

    <!-- Document Settings -->
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    <!-- Base Meta -->
    <!-- dynamically fixing the title for tag/author pages -->



    <title>线程安全及常见的实现思路(draft)</title>
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Styles'n'Scripts -->
    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css" />
    <link rel="stylesheet" type="text/css" href="/assets/built/screen.edited.css" />
    <link rel="stylesheet" type="text/css" href="/assets/built/syntax.css" />
    <!-- highlight.js -->
    <link rel="stylesheet" href="/assets/built/default.min.css">
    <style>.hljs { background: none; }</style>

    <!--[if IE]>
        <style>
            p, ol, ul{
                width: 100%;
            }
            blockquote{
                width: 100%;
            }
        </style>
    <![endif]-->

    <!-- This tag outputs SEO meta+structured data and other important settings -->
    <meta name="description" content="Neutral, sometimes chaotic neutral" />
    <link rel="shortcut icon" href="/assets/images/favicon.png" type="image/png" />
    <link rel="canonical" href="/Thread-Safe" />
    <meta name="referrer" content="no-referrer-when-downgrade" />

     <!--title below is coming from _includes/dynamic_title-->
    <meta property="og:site_name" content="Lament's Mage Tower" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="线程安全及常见的实现思路(draft)" />
    <meta property="og:description" content="# 线程安全 当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。 ## 五种共享数据的类型 1. 不可变的类型 final关键字带来的可见性，保证了只要一个不可变对象（基本数据类型or不可变类的实例）正确的被创建了，那他就是线程安全的。 当然对于不可变类，Java不能保证它的值不会变，这个要靠类自己的实现确保不会改变，比如String。 2. 绝对线程安全的类型 **“绝对线程安全”**类型的共享数据是指：无论在什么情况下，直接使用都不会出意外状况，由于要求过于严格，代价可能非常大。 JavaAPI中很多线程安全的类都不是绝对线程安全，往往需要增加额外的同步手段，比如java.util.Vector。 3. 相对线程安全的类型 此类共享数据是指：保证对该数据的单次操作是线程安全的，特殊情况需要调用方通过同步等手段保证正确。 java.util.Vector 就是相对安全的类型。 4. 线程兼容的类型 这类共享数据，本身不是线程安全的，但是调用方可以使用同步手段，让这些数据在并发环境中正常工作。 5. 线程对立的类型 无论如何都不能被并发的数据。 ## 线程安全的实现思路 ### 互斥同步/阻塞同步 互斥同步中，互斥指共享的数据本身是互斥的，同一时刻只能被一个线程（信号量则是一些）访问（主要是写/修改），以此保证多线程同时访问共享数据仍然保持同步。 由于共享数据是互斥的，其他线程在锁释放前都会被阻塞，所以也叫阻塞同步。 互斥同步/阻塞同步是一种悲观的并发策略，它假设不加锁就一定会出问题。 #### 互斥的实现方式 TODO 1. 临界区 Critical Section 2. 互斥量 Mutex 3. 信号量 Semaphore #### 实现互斥同步的几种方式： ##### synchronized块 先回忆下前面的知识： 更大范围的原子性保证通过" />
    <meta property="og:url" content="/Thread-Safe" />
    <meta property="og:image" content="/assets/images/blog-cover.jpg" />
    <meta property="article:publisher" content="https://www.facebook.com/" />
    <meta property="article:author" content="https://www.facebook.com/" />
    <meta property="article:published_time" content="2021-01-25T00:00:00+08:00" />
    <meta property="article:modified_time" content="2021-01-25T00:00:00+08:00" />
    <meta property="article:tag" content="Scroll" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="线程安全及常见的实现思路(draft)" />
    <meta name="twitter:description" content="# 线程安全 当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。 ## 五种共享数据的类型 1. 不可变的类型 final关键字带来的可见性，保证了只要一个不可变对象（基本数据类型or不可变类的实例）正确的被创建了，那他就是线程安全的。 当然对于不可变类，Java不能保证它的值不会变，这个要靠类自己的实现确保不会改变，比如String。 2. 绝对线程安全的类型 **“绝对线程安全”**类型的共享数据是指：无论在什么情况下，直接使用都不会出意外状况，由于要求过于严格，代价可能非常大。 JavaAPI中很多线程安全的类都不是绝对线程安全，往往需要增加额外的同步手段，比如java.util.Vector。 3. 相对线程安全的类型 此类共享数据是指：保证对该数据的单次操作是线程安全的，特殊情况需要调用方通过同步等手段保证正确。 java.util.Vector 就是相对安全的类型。 4. 线程兼容的类型 这类共享数据，本身不是线程安全的，但是调用方可以使用同步手段，让这些数据在并发环境中正常工作。 5. 线程对立的类型 无论如何都不能被并发的数据。 ## 线程安全的实现思路 ### 互斥同步/阻塞同步 互斥同步中，互斥指共享的数据本身是互斥的，同一时刻只能被一个线程（信号量则是一些）访问（主要是写/修改），以此保证多线程同时访问共享数据仍然保持同步。 由于共享数据是互斥的，其他线程在锁释放前都会被阻塞，所以也叫阻塞同步。 互斥同步/阻塞同步是一种悲观的并发策略，它假设不加锁就一定会出问题。 #### 互斥的实现方式 TODO 1. 临界区 Critical Section 2. 互斥量 Mutex 3. 信号量 Semaphore #### 实现互斥同步的几种方式： ##### synchronized块 先回忆下前面的知识： 更大范围的原子性保证通过" />
    <meta name="twitter:url" content="/" />
    <meta name="twitter:image" content="/assets/images/blog-cover.jpg" />
    <meta name="twitter:label1" content="Written by" />
    <meta name="twitter:data1" content="Lament's Mage Tower" />
    <meta name="twitter:label2" content="Filed under" />
    <meta name="twitter:data2" content="Scroll" />
    <meta name="twitter:site" content="@" />
    <meta name="twitter:creator" content="@" />
    <meta property="og:image:width" content="1400" />
    <meta property="og:image:height" content="933" />

    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Website",
    "publisher": {
        "@type": "Organization",
        "name": "Lament's Mage Tower",
        "logo": "/assets/images/blog-icon.png"
    },
    "url": "/Thread-Safe",
    "image": {
        "@type": "ImageObject",
        "url": "/assets/images/blog-cover.jpg",
        "width": 2000,
        "height": 666
    },
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "/Thread-Safe"
    },
    "description": "# 线程安全 当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。 ## 五种共享数据的类型 1. 不可变的类型 final关键字带来的可见性，保证了只要一个不可变对象（基本数据类型or不可变类的实例）正确的被创建了，那他就是线程安全的。 当然对于不可变类，Java不能保证它的值不会变，这个要靠类自己的实现确保不会改变，比如String。 2. 绝对线程安全的类型 **“绝对线程安全”**类型的共享数据是指：无论在什么情况下，直接使用都不会出意外状况，由于要求过于严格，代价可能非常大。 JavaAPI中很多线程安全的类都不是绝对线程安全，往往需要增加额外的同步手段，比如java.util.Vector。 3. 相对线程安全的类型 此类共享数据是指：保证对该数据的单次操作是线程安全的，特殊情况需要调用方通过同步等手段保证正确。 java.util.Vector 就是相对安全的类型。 4. 线程兼容的类型 这类共享数据，本身不是线程安全的，但是调用方可以使用同步手段，让这些数据在并发环境中正常工作。 5. 线程对立的类型 无论如何都不能被并发的数据。 ## 线程安全的实现思路 ### 互斥同步/阻塞同步 互斥同步中，互斥指共享的数据本身是互斥的，同一时刻只能被一个线程（信号量则是一些）访问（主要是写/修改），以此保证多线程同时访问共享数据仍然保持同步。 由于共享数据是互斥的，其他线程在锁释放前都会被阻塞，所以也叫阻塞同步。 互斥同步/阻塞同步是一种悲观的并发策略，它假设不加锁就一定会出问题。 #### 互斥的实现方式 TODO 1. 临界区 Critical Section 2. 互斥量 Mutex 3. 信号量 Semaphore #### 实现互斥同步的几种方式： ##### synchronized块 先回忆下前面的知识： 更大范围的原子性保证通过"
}
    </script>

    <!-- <script type="text/javascript" src="https://demo.ghost.io/public/ghost-sdk.min.js?v=724281a32e"></script>
    <script type="text/javascript">
    ghost.init({
    	clientId: "ghost-frontend",
    	clientSecret: "f84a07a72b17"
    });
    </script> -->

    <meta name="generator" content="Jekyll 3.6.2" />
    <link rel="alternate" type="application/rss+xml" title="线程安全及常见的实现思路(draft)" href="/feed.xml" />


</head>
<body class="post-template">

    <div class="site-wrapper">
        <!-- All the main content gets inserted here, index.hbs, post.hbs, etc -->
        <!-- default -->

<!-- The tag above means: insert everything in this file
into the {body} of the default.hbs template -->

<header class="site-header outer">
    <div class="inner">
        <nav class="site-nav">
    <div class="site-nav-left">
        
            
                <a class="site-nav-logo" href="/">
                  <!-- <img src="/assets/images/blog-icon.png" alt="Lament's Mage Tower" /> -->
                  Lament
                </a>
            
        
        
            <ul class="nav" role="menu">
    <li class="nav-home" role="menuitem"><a href="/">Home</a></li>
    <li class="nav-magical-index" role="menuitem"><a href="/tag/magical-index/">Magical Index</a></li>
    <li class="nav-alchemy-lab" role="menuitem"><a href="/tag/alchemy-lab/">Alchemy Lab</a></li>
    <li class="nav-scroll" role="menuitem"><a href="/tag/scroll/">Scroll</a></li>
    <li class="nav-about" role="menuitem"><a href="/about/">About</a></li>
</ul>

        
    </div>
    <div class="site-nav-right">
        <div class="social-links">
            
            
        </div>
        
    </div>
</nav>

    </div>
</header>

<!-- Everything inside the #post tags pulls data from the post -->
<!-- #post -->

<main id="site-main" class="site-main outer" role="main">
    <div class="inner">

        <article class="post-full post tag-scroll no-image">

            <header class="post-full-header">
                <section class="post-full-meta">
                    <time class="post-full-meta-date" datetime="25 January 2021">25 January 2021</time>
                    
                        <span class="date-divider">/</span>
                        
                            
                               <a href='/tag/scroll/'>SCROLL</a>
                            
                        
                    
                </section>
                <h1 class="post-full-title">线程安全及常见的实现思路(draft)</h1>
            </header>

            

            <section class="post-full-content">
                <div class="kg-card-markdown">
                    # 线程安全

当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。

## 五种共享数据的类型

1. 不可变的类型  

  final关键字带来的可见性，保证了只要一个不可变对象（基本数据类型or不可变类的实例）正确的被创建了，那他就是线程安全的。

  当然对于不可变类，Java不能保证它的值不会变，这个要靠类自己的实现确保不会改变，比如String。

2. 绝对线程安全的类型  

  **“绝对线程安全”**类型的共享数据是指：无论在什么情况下，直接使用都不会出意外状况，由于要求过于严格，代价可能非常大。
  JavaAPI中很多线程安全的类都不是绝对线程安全，往往需要增加额外的同步手段，比如java.util.Vector。

3. 相对线程安全的类型
  此类共享数据是指：保证对该数据的单次操作是线程安全的，特殊情况需要调用方通过同步等手段保证正确。
  java.util.Vector 就是相对安全的类型。

4. 线程兼容的类型  
   这类共享数据，本身不是线程安全的，但是调用方可以使用同步手段，让这些数据在并发环境中正常工作。

5. 线程对立的类型  
   无论如何都不能被并发的数据。

## 线程安全的实现思路  

### 互斥同步/阻塞同步  

   互斥同步中，互斥指共享的数据本身是互斥的，同一时刻只能被一个线程（信号量则是一些）访问（主要是写/修改），以此保证多线程同时访问共享数据仍然保持同步。
   由于共享数据是互斥的，其他线程在锁释放前都会被阻塞，所以也叫阻塞同步。

   互斥同步/阻塞同步是一种悲观的并发策略，它假设不加锁就一定会出问题。

#### 互斥的实现方式

TODO

1. 临界区 Critical Section

2. 互斥量 Mutex

3. 信号量 Semaphore

#### 实现互斥同步的几种方式：

##### synchronized块

  先回忆下前面的知识：

  更大范围的原子性保证通过 lock 和 unlock 来实现，JVM提供了 monitorEnter 和 monitorExit 来隐式的使用 lock 和 unlock ，代码中对应的则是 synchronized 关键字。

  主流Java虚拟机实现中，Java的线程是映射到操作系统的原生内核线程之上的，如果要阻塞或唤醒一条线程，则需要操作系统来帮忙完成，这就不可避免地陷入用户态到核心态的转换中，进行这种状态转换需要耗费很多的处理器时间。

  所以 synchronized 会被编译成 monitorEnter monitorExit 这两条字节码指令，这两个字节码指令都需要一个 reference 类型的参数来指明 要锁定和解锁的对象。如果Java源码中的synchronized明确指定了对象参数，那就以这个对象的引用作为reference;如果没有明确指定，那将根据synchronized修饰的方法类型(如实例方法或类方法)，来决定是取代码所在的对象实例还是取类型对应的Class对象来作为线程要持有的锁。

      1. synchronized块中的代码，可以被同一线程重复进入，简称可重入。

      2. 释放锁之前无条件阻塞其他线程。其他的线程拿他一点办法没有。

  根据上面的信息可以看出，synchronized块是一种重量级的操作，首先它会阻塞其他线程，这种阻塞会导致大量的状态转换。

##### 重入锁(ReentrantLock)

  由于synchronized块的局限性(只能对引用类型加锁，只能等执行结束or异常中断，不可避免的切换代价)，Java类库提供了java.util.concurrent包，通常被简称为JUC，其中java.util.concurrent.locks.Lock接口便成了Java的另一种全新的互斥同步手段。

  基于Lock接口，用户能够以非块结构(Non-Block Structured)来实现互斥同步，从而摆脱了语言特性的束缚，改为在类库层面去实现同步。

  重入锁-ReentrantLock就是Lock的一种实现。 与synchronized块一样它是可重入的（就这种锁都带个计数器），但是多了一些高级功能：

  1. 等待可中断
    当持有锁的线程长时间不放弃锁的话，等待线程可以放弃等待，然后去干别的。
    synchronized block 的话，就只能老老实实的等着。

  2. 公平锁  
    所谓公平就是，一个锁释放后，其他等待线程按照先来后到的顺序获取锁。
    重入锁(ReentrantLock) 默认和synchronized块一样都是非公平锁，一个锁释放后，其他在等待的线程谁抢到是谁的。
    不过重入锁(ReentrantLock) 可以通过构造函数的参数来创建成公平的可重入锁。

  3. 锁可以绑定多个条件  
    一个ReentrantLock对象可以绑定多个Condition对象。
    synchronized块 锁对象的wait()和notify()/notifyAll()配合起来实现一个隐含条件，但是多个条件就得多加对应数量的锁。


### 非阻塞同步    

    这种一种乐观的并发策略，这种策略认为不对被共享的数据“加锁”，直接操作也不一定就会出错。
    所以它是先对数据操作，如果这期间共享数据确实没有被其他线程折腾，那就直接成功；如果发生了冲突，那再执行补救措施，比如重试等。

    这种策略中非常重要的两步 操作 和 冲突检测 这两步必须具备原子性，而且需要由硬件指令来保证（软件的话保证它们的原子性就又绕回阻塞同步了），当硬件指令可以保证这两部操作的原子性时，这种策略就成为了可能，Java中给开发者提供的是 CAS(Compare-and-Swap) 指令。

    比如Java类库里的原子整数类型的自增方法  AtomicInteger.incrementAndGet().
    虽然CAS很美好，但是存在ABA问题。
#### ABA问题

  假设 letter = "A"， T1 读到letter的值为A，然后T1做了一些准备工作，做完后又读取letter（还是A）打算给它赋值。这个A是T1第一次读到的A吗？

  T1做准备工作的时候，它不知道有没有一个T2来了，并且T2 把letter的值改为了B，然后又改回了A。

  为了解决ABA问题，它们又给letter加了个时间戳属性，但是比较鸡肋，因为大部分时候ABA问题不会导致并发错误。

### 无同步  

  这种策略就干脆是，我所有的代码都不存在变量被并发访问的情况，即便有一些共享数据但是我把他们都放在同一个线程里(Thread Local Storage)，自然也就无所谓线程安全。    

                </div>
            </section>

            <!-- Email subscribe form at the bottom of the page -->
            

            <footer class="post-full-footer">
                <!-- Everything inside the #author tags pulls data from the author -->
                <!-- #author-->
                
                    
                
                <!-- /author  -->
            </footer>

            <!-- If you use Disqus comments, just uncomment this block.
            The only thing you need to change is "test-apkdzgmqhj" - which
            should be replaced with your own Disqus site-id. -->
            

        </article>

    </div>
</main>

<!-- Links to Previous/Next posts -->
<aside class="read-next outer">
    <div class="inner">
        <div class="read-next-feed">
            
                
                
                
                
                    <article class="read-next-card"
                        
                            style="background-image: url(/assets/images/blog-cover.jpg)"
                        
                    >
                        <header class="read-next-card-header">
                            <small class="read-next-card-header-sitetitle">&mdash; Lament's Mage Tower &mdash;</small>
                            
                                <h3 class="read-next-card-header-title"><a href="/tag/scroll/">Scroll</a></h3>
                            
                        </header>
                        <div class="read-next-divider"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13 14.5s2 3 5 3 5.5-2.463 5.5-5.5S21 6.5 18 6.5c-5 0-7 11-12 11C2.962 17.5.5 15.037.5 12S3 6.5 6 6.5s4.5 3.5 4.5 3.5"/></svg>
</div>
                        <div class="read-next-card-content">
                            <ul>
                                
                                
                                  
                                    
                                        
                                        
                                            <li><a href="/collections-Queue">Java集合类系列:Queue</a></li>
                                        
                                    
                                  
                                
                                  
                                    
                                        
                                        
                                            <li><a href="/lock-ad">几种锁优化简介</a></li>
                                        
                                    
                                  
                                
                                  
                                    
                                  
                                
                                  
                                    
                                        
                                        
                                            <li><a href="/JMM-And-Thread">Java内存模型</a></li>
                                        
                                    
                                  
                                
                                  
                                    
                                        
                                        
                                    
                                  
                                
                                  
                                    
                                        
                                        
                                    
                                  
                                
                                  
                                    
                                        
                                        
                                    
                                  
                                
                                  
                                    
                                        
                                        
                                    
                                  
                                
                                  
                                    
                                        
                                        
                                    
                                  
                                
                                  
                                    
                                        
                                        
                                    
                                  
                                
                                  
                                
                                  
                                
                                  
                                    
                                        
                                        
                                    
                                  
                                
                            </ul>
                        </div>
                        <footer class="read-next-card-footer">
                            <a href="/tag/scroll/">
                                
                                    See all 10 posts  →
                                
                            </a>
                        </footer>
                    </article>
                
            

            <!-- If there's a next post, display it using the same markup included from - partials/post-card.hbs -->
            
                

    <article class="post-card post-template no-image">
        
        <div class="post-card-content">
            <a class="post-card-content-link" href="/lock-ad">
                <header class="post-card-header">
                    
                        
                            
                                <span class="post-card-tags">Scroll</span>
                            
                        
                    

                    <h2 class="post-card-title">几种锁优化简介</h2>
                </header>
                <section class="post-card-excerpt">
                    
                        <p></p>
                    
                </section>
            </a>
            <footer class="post-card-meta">
                
                    
                
                <span class="reading-time">
                    
                    
                      1 min read
                    
                </span>
            </footer>
        </div>
    </article>

            

            <!-- If there's a previous post, display it using the same markup included from - partials/post-card.hbs -->
            
                

    <article class="post-card post-template no-image">
        
        <div class="post-card-content">
            <a class="post-card-content-link" href="/JMM-And-Thread">
                <header class="post-card-header">
                    
                        
                            
                                <span class="post-card-tags">Scroll</span>
                            
                        
                    

                    <h2 class="post-card-title">Java内存模型</h2>
                </header>
                <section class="post-card-excerpt">
                    
                        <p></p>
                    
                </section>
            </a>
            <footer class="post-card-meta">
                
                    
                
                <span class="reading-time">
                    
                    
                      1 min read
                    
                </span>
            </footer>
        </div>
    </article>

            

        </div>
    </div>
</aside>

<!-- Floating header which appears on-scroll, included from includes/floating-header.hbs -->
<div class="floating-header">
    <div class="floating-header-logo">
        <a href="/">
            
                <img src="/assets/images/favicon.png" alt="Lament's Mage Tower icon" />
            
            <span>Lament's Mage Tower</span>
        </a>
    </div>
    <span class="floating-header-divider">&mdash;</span>
    <div class="floating-header-title">线程安全及常见的实现思路(draft)</div>
    <div class="floating-header-share">
        <div class="floating-header-share-label">Share this <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path d="M7.5 15.5V4a1.5 1.5 0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5 0 0 1 1.5 1.5v3.099c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a1.2 1.2 0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2"/>
</svg>
</div>
        <a class="floating-header-share-tw" href="https://twitter.com/share?text=%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%8F%8A%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF%28draft%29&amp;url=https://lament-z.comThread-Safe"
            onclick="window.open(this.href, 'share-twitter', 'width=550,height=235');return false;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M30.063 7.313c-.813 1.125-1.75 2.125-2.875 2.938v.75c0 1.563-.188 3.125-.688 4.625a15.088 15.088 0 0 1-2.063 4.438c-.875 1.438-2 2.688-3.25 3.813a15.015 15.015 0 0 1-4.625 2.563c-1.813.688-3.75 1-5.75 1-3.25 0-6.188-.875-8.875-2.625.438.063.875.125 1.375.125 2.688 0 5.063-.875 7.188-2.5-1.25 0-2.375-.375-3.375-1.125s-1.688-1.688-2.063-2.875c.438.063.813.125 1.125.125.5 0 1-.063 1.5-.25-1.313-.25-2.438-.938-3.313-1.938a5.673 5.673 0 0 1-1.313-3.688v-.063c.813.438 1.688.688 2.625.688a5.228 5.228 0 0 1-1.875-2c-.5-.875-.688-1.813-.688-2.75 0-1.063.25-2.063.75-2.938 1.438 1.75 3.188 3.188 5.25 4.25s4.313 1.688 6.688 1.813a5.579 5.579 0 0 1 1.5-5.438c1.125-1.125 2.5-1.688 4.125-1.688s3.063.625 4.188 1.813a11.48 11.48 0 0 0 3.688-1.375c-.438 1.375-1.313 2.438-2.563 3.188 1.125-.125 2.188-.438 3.313-.875z"/></svg>

        </a>
        <a class="floating-header-share-fb" href="https://www.facebook.com/sharer/sharer.php?u=https://lament-z.comThread-Safe"
            onclick="window.open(this.href, 'share-facebook','width=580,height=296');return false;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M19 6h5V0h-5c-3.86 0-7 3.14-7 7v3H8v6h4v16h6V16h5l1-6h-6V7c0-.542.458-1 1-1z"/></svg>

        </a>
    </div>
    <progress class="progress" value="0">
        <div class="progress-container">
            <span class="progress-bar"></span>
        </div>
    </progress>
</div>


<!-- /post -->

<!-- The #contentFor helper here will send everything inside it up to the matching #block helper found in default.hbs -->


        <!-- Previous/next page links - displayed on every page -->
        

        <!-- The footer at the very bottom of the screen -->
        <footer class="site-footer outer">
            <div class="site-footer-content inner">
                <section class="copyright"><a href="/">Lament's Mage Tower</a> &copy; 2021</section>
                <section class="poweredby">Proudly published with <a href="https://jekyllrb.com/">Jekyll</a> &
                    <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> using
                    <a href="https://github.com/jekyller/jasper2" target="_blank" rel="noopener">Jasper2</a></section>
                <nav class="site-footer-nav">
                    <a href="/">Latest Posts</a>
                    
                    
                    <a href="https://ghost.org" target="_blank" rel="noopener">Ghost</a>
                </nav>
            </div>
        </footer>

    </div>

    <!-- The big email subscribe modal content -->
    

    <!-- highlight.js -->
    <script src="/assets/js/prism-abap.min.js"></script>
    <script>$(document).ready(function() {
      $('pre code').each(function(i, block) {
        hljs.highlightBlock(block);
      });
    });</script>

    <!-- jQuery + Fitvids, which makes all video embeds responsive -->
    <script
        src="https://code.jquery.com/jquery-3.2.1.min.js"
        integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
        crossorigin="anonymous">
    </script>
    <script type="text/javascript" src="/assets/js/jquery.fitvids.js"></script>
    <script type="text/javascript" src="/assets/js/jquery.fitvids.js?v=724281a32e"></script>


    <!-- Paginator increased to "infinit" in _config.yml -->
    <!-- if paginator.posts  -->
    <!-- <script>
        var maxPages = parseInt('');
    </script>
    <script src="/assets/js/infinitescroll.js"></script> -->
    <!-- /endif -->

    


    <!-- Add Google Analytics  -->
    <!-- Google Analytics Tracking code -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-B47LPLXBQP"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-B47LPLXBQP');
</script>


    <!-- The #block helper will pull in data from the #contentFor other template files. In this case, there's some JavaScript which we only want to use in post.hbs, but it needs to be included down here, after jQuery has already loaded. -->
    
        <script>

// NOTE: Scroll performance is poor in Safari
// - this appears to be due to the events firing much more slowly in Safari.
//   Dropping the scroll event and using only a raf loop results in smoother
//   scrolling but continuous processing even when not scrolling
$(document).ready(function () {
    // Start fitVids
    var $postContent = $(".post-full-content");
    $postContent.fitVids();
    // End fitVids

    var progressBar = document.querySelector('progress');
    var header = document.querySelector('.floating-header');
    var title = document.querySelector('.post-full-title');

    var lastScrollY = window.scrollY;
    var lastWindowHeight = window.innerHeight;
    var lastDocumentHeight = $(document).height();
    var ticking = false;

    function onScroll() {
        lastScrollY = window.scrollY;
        requestTick();
    }

    function onResize() {
        lastWindowHeight = window.innerHeight;
        lastDocumentHeight = $(document).height();
        requestTick();
    }

    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(update);
        }
        ticking = true;
    }

    function update() {
        var trigger = title.getBoundingClientRect().top + window.scrollY;
        var triggerOffset = title.offsetHeight + 35;
        var progressMax = lastDocumentHeight - lastWindowHeight;

        // show/hide floating header
        if (lastScrollY >= trigger + triggerOffset) {
            header.classList.add('floating-active');
        } else {
            header.classList.remove('floating-active');
        }

        progressBar.setAttribute('max', progressMax);
        progressBar.setAttribute('value', lastScrollY);

        ticking = false;
    }

    window.addEventListener('scroll', onScroll, {passive: true});
    window.addEventListener('resize', onResize, false);

    update();
});
</script>

    

    <!-- Ghost outputs important scripts and data with this tag - it should always be the very last thing before the closing body tag -->
    <!-- ghost_foot -->

</body>
</html>
